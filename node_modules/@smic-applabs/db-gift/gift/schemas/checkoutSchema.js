const getSchemas = (Schema) => {
    const CheckoutSchema = new Schema({
        referenceNo: { type: String, required: true },
        owner: { type: Schema.Types.ObjectId },
        checkoutDate: { type: Date, default: Date.now },

        grossTotal: { type: Number, default: 0 }, // gross amount of the cart
        productTotal: { type: Number, default: 0 },
        totalDiscount: { type: Number, default: 0 }, // total discount
        totalDeliveryCharge: { type: Number, default: 0 },
        subTotal: { type: Number, default: 0 }, // gross - total discount if exist
        amount: { type: Number, default: 0 }, // amount paid or to pay
        capturedAmount: { type: Number, default: 0 },

        paymentRequestPayload: JSON,
        paymentRequestResponse: JSON,

        giftBasketIds: [String],

        bank: String,
        country: String,
        creditCardName: String,
        cardType: String, // cc or dc
        cardBrand: String, // VISA MASTERCARD etc..

        paymentId: String, // type of payment [1: CC, 3: GCASH, 18: Dragon Pay Online, 19: Dragon Pay Non Bank, 20: Dragon Pay Bank]
        bankAuthorizationCode: String,
        cardNumber: { type: String },
        status: { type: String, default: "Pending" }, // from ipay status: { type: String, index: true },  from estore-graph
        errDescription: String,
        jsonResponse: JSON,
        orderSnapshot: [JSON],
        loyaltyCard: { type: Schema.Types.ObjectId }
    })

    return { CheckoutSchema }
}

module.exports = getSchemas