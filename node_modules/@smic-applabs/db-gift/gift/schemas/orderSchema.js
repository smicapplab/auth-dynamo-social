const getSchemas = (Schema) => {
    const OrderSchema = new Schema({
        referenceNo: { type: String, required: true },
        owner: { type: Schema.Types.ObjectId },
        sender: JSON,
        checkout: { type: Schema.Types.ObjectId },
        checkoutDate: { type: Date, default: Date.now },

        grossTotal: { type: Number, default: 0 }, // gross amount of the cart
        productTotal: { type: Number, default: 0 },
        orderDiscount: { type: Number, default: 0 },
        subTotal: { type: Number, default: 0 }, // gross - total discount if exist
        amount: { type: Number, default: 0 }, // amount paid or to pay
        status: { type: String, default: "Pending" },
        giftee: { type: Schema.Types.ObjectId, required: true },
        firstName: { type: String },
        lastName: { type: String },
        deliveryAddress: { type: String },
        deliveryAddress2: { type: String },
        lng: { type: Number },
        lat: { type: Number },
        email: { type: String },
        mobile: { type: String },
        branch: { type: Schema.Types.ObjectId },
        isPickup: { type: Boolean, default: false },
        deliveryDate: { type: Date },
        deliveryFee: { type: Number },
        apiHistory: [JSON],
        hasChanges: { type: Boolean, default: false },
        changeHistory: [String],
        paymentId: String,
        authorizeDate: Date,
        authorizeAmount: Number,
        authorizeRequestId: String,
        authorizeResponseId: String,
        captureDate: Date,
        captureRequestId: String,
        captureResponseId: String,
        approvalCode: String,
        branchName: String,
    })

    const OrderItemSchema = new Schema({
        order: { type: Schema.Types.ObjectId, required: true },
        referenceNo: { type: String, required: true },
        magentoId: String,
        babySkuCode: { type: String },
        productName: { type: String },
        currentPrice: { min: 0.001, type: Number, required: true },
        image: { type: String },
        isGiftBasket: { type: Boolean, default: true },
        quantity: { type: Number, default: 1 },
        discount: { type: Number, default: 0 },
        total: { type: Number, default: 0 },
        hasChanges: { type: Boolean, default: false },
        changeHistory: [String],
        updateHistory: [JSON]
    })

    return { OrderSchema, OrderItemSchema }
}

module.exports = getSchemas