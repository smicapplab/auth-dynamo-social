const fs = require("fs")

// schema param will come from parent app's Mongoose.Schema
const dynamicSchemaImport = directory => schema => {
  try {
    const Schemas = fs.readdirSync(directory).reduce((acc, file) => {
      const getSchemaInstance = require(`${directory}/${file}`)
      const schemaInstance = getSchemaInstance(schema)
      Object.keys(schemaInstance).map(
        item => (acc[item] = schemaInstance[item])
      )
      return acc
    }, {})

    return Schemas
  } catch (err) {
    throw err
  }
}

const dynamicModelImport = directory => ({ dbConn, Schema, options }) => {
  try {
    const Models = fs.readdirSync(directory).reduce((acc, file) => {
      const getModelInstance = require(`${directory}/${file}`)
      const model = getModelInstance({ dbConn, Schema, options })
      Object.keys(model).map(item => (acc[item] = model[item]))
      return acc
    }, {})

    return Models
  } catch (err) {
    throw err
  }
}

const dynamicIndexImport = directory => ({ dbConn, dbName, models }) => {
  try {
    const Indexes = fs.readdirSync(directory).reduce((acc, file) => {
      const filePath = `${directory}/${file}`
      const getIndex = require(filePath)
      const name = file.replace("Index.js", "")

      const createIndex = getIndex({ dbConn, dbName, name, models })
      acc[`${dbName}_${name}`] = createIndex
      return acc
    }, {})

    return Indexes
  } catch (err) {
    throw err
  }
}

const getModel = ({ dbConn, dbName, Schema }) => name =>
  require(`${__dirname}/../${dbName}/models/${name}Model.js`)({
    dbConn,
    Schema
  })

const getSchema = (dbName, schemaName) =>
  require(`${__dirname}/../${dbName}/schemas/${schemaName}Schema.js`)

const logIndexInfo = async ({ model, schema, modelName }) =>
  model.on("index", err => {
    if (err) {
      console.error(`❌ ${modelName} index error: ${err}`)
    } else {
      console.log(`>>>>>>>> ${modelName} indexes >>>>>>>>\n`)
      console.log(schema.indexes())
      console.info(`🍰 ${modelName} indexing complete\n`)
    }
  })

const processIndex = ({ model, schema, modelName, schemaIndexes }) =>
  new Promise(async (resolve, reject) => {
    if (!model) {
      reject(`Error: ${modelName} not found.`)
    }

    model.collection.dropIndexes()

    await logIndexInfo({
      model,
      schema,
      modelName
    })

    schemaIndexes.forEach(async item => {
      // mongoose's auto add {background: true} opt
      const [index, indexOpts] = item

      let result = await model.collection.createIndex(index, indexOpts)

      resolve(result)
    })
  })

const singleModelCreateIdx = ({
  dbConn,
  dbName,
  name, // the name of the schema file group eg. {name}Schema.js
  schemaIndexes,
  modelName,
  model
}) =>
  new Promise((resolve, reject) => {
    const { Schema } = dbConn.base
    const { [`${modelName}Schema`]: schema } = getSchema(dbName, name)(Schema)

    const processIndexPromise = processIndex({
      model,
      schema,
      modelName,
      schemaIndexes
    })

    return Promise.all([processIndexPromise])
      .then(result => resolve(result))
      .catch(err => reject(err))
  })

const multiModelCreateIdx = ({
  dbConn,
  dbName,
  name,
  modelIndexes,
  models
}) => {
  const modelIdxPromises = modelIndexes.map(item =>
    singleModelCreateIdx({
      dbConn,
      dbName,
      name,
      schemaIndexes: item.indexes,
      modelName: item.name,
      model: models[item.name]
    })
  )

  return Promise.all(modelIdxPromises).catch(err => {
    throw err
  })
}

const filterSchemas = (targetSchemas, Schemas) =>
  Object.keys(Schemas).reduce((acc, item) => {
    if (targetSchemas.includes(item)) {
      acc.push({ [item]: Schemas[item] })
    }
    return acc
  }, [])

const getMdlFromSchemas = ({
  dbConn,
  Schema,
  getSchemas,
  options
}) => arraySchemas => {
  if (options) {
    // initialize plugins
    Object.keys(options.plugins).forEach(item =>
      options.plugins[item].initialize(dbConn)
    )
    // todo: improve this
    // attach options to Schema
    Schema.options = options
  }

  const Schemas = getSchemas(Schema)
  const filteredSchemas = filterSchemas(arraySchemas, Schemas)

  const models = filteredSchemas.reduce((acc, schema) => {
    const [name] = Object.keys(schema)
    const modelName = name.replace("Schema", "")
    const model = dbConn.model(modelName, schema[name])
    acc[modelName] = model
    return acc
  }, {})

  return models
}

/**
 * Format date to MM/DD/YYYY.
 * @param {object} date - JS Date Object.
 * @return {string} Formatted Date.
 */
const getFormattedDate = date => {
  const month = (1 + date.getMonth()).toString().padStart(2, "0")
  const day = date
    .getDate()
    .toString()
    .padStart(2, "0")
  const year = date.getFullYear()

  return `${month}/${day}/${year}`
}

module.exports = {
  getModel,
  getSchema,
  dynamicSchemaImport,
  dynamicModelImport,
  dynamicIndexImport,
  multiModelCreateIdx,
  getMdlFromSchemas,
  getFormattedDate
}
